import dash_leaflet as dl
from plotly import graph_objects as go
from rustworkx import PyDiGraph

from fell_finder.containers.routes import Route
from fell_finder.plotting.plotting import get_geometry_from_route


def generate_polyline_data(graph: PyDiGraph, route: Route) -> dl.Polyline:
    """For a generated route, generate a Plotly graph which plots it onto
    a mapbox map.

    Args:
        graph (Graph): A graph containing latitude & longitude information for
          every node visited in the provided route
        route (Route): A route generated by a RouteMaker

    Returns:
        go.Figure: A mapbox plot of the provided route
    """

    # positions = get_visited_coords_from_route(full_graph, cond_graph, route)
    route_geo = get_geometry_from_route(graph, route)
    positions = [
        (lat, lon) for lat, lon in zip(route_geo["lats"], route_geo["lons"])
    ]

    polyline = dl.Polyline(
        positions=positions, id="route-plot-trace", interactive=True
    )

    return polyline


def generate_elevation_data(graph: PyDiGraph, route: Route) -> go.Figure:
    """For a generated route, generate a plotly graph which displays the
    elevation profile.

    Args:
        route (Route): A route generated by a RouteMaker"""

    route_geo = get_geometry_from_route(graph, route)

    distance = route_geo["distances"]
    elevation = route_geo["elevations"]
    coords = [
        (lat, lon) for lat, lon in zip(route_geo["lats"], route_geo["lons"])
    ]

    total_distance = route.distance
    total_elevation = route.elevation_gain

    title = (
        f"Distance: {total_distance:,.0f} m, "
        f"Elevation: {total_elevation:,.0f} m"
    )

    route_trace = go.Scatter(
        mode="lines+markers",
        x=distance,
        y=elevation,
        line=dict(shape="spline"),
        customdata=coords,
    )

    layout = go.Layout(
        title=title,
        margin=dict(l=20, r=20, t=40, b=20),
    )

    figure = go.Figure(data=[route_trace], layout=layout)

    return figure
