"""Some basic functions for plotting routes and their elevation profiles,
this will be a prime target for development once work on the webapp gets
underway."""

from typing import List, Tuple

import dash_leaflet as dl
from networkx import DiGraph
from plotly import graph_objects as go

from fell_finder.containers.routes import Route


def generate_filename(route: Route) -> str:
    """Generate a file name for the provided route.

    Args:
        route (Route): A populated route

    Returns:
        str: A name for the provided route
    """
    gain = route.elevation_gain
    dist = route.distance
    name = f"gain_{gain:,.2f}_dist_{dist:,.2f}"
    return name


# TODO: Use dash-leaflet to rewrite this function


def get_visited_nodes_from_route(
    cond_graph: DiGraph, route: Route
) -> List[int]:

    visited_points = []

    last_id = None
    for node_id in route.route:
        if last_id is not None:
            last_edge = cond_graph[last_id][node_id]
            if "via" in last_edge:
                visited_points += last_edge["via"]

        visited_points.append(node_id)

        last_id = node_id

    return visited_points


def get_visited_coords_from_route(
    full_graph: DiGraph, cond_graph: DiGraph, route: Route
) -> List[Tuple[float, float]]:

    visited_nodes = get_visited_nodes_from_route(cond_graph, route)

    coords = []
    for node_id in visited_nodes:
        node = full_graph.nodes[node_id]
        lat = node["lat"]
        lon = node["lon"]
        coords.append((lat, lon))

    return coords


def plot_elevation_profile(
    full_graph: DiGraph, cond_graph: DiGraph, route: Route
) -> go.Figure:
    """For a generated route, generate a plotly graph which displays the
    elevation profile.

    Args:
        route (Route): A route generated by a RouteMaker"""

    # visited_points = unpack_route_details(graph, route)
    cml_dist = 0
    last_id = None
    dists, eles = [], []
    for node_id in get_visited_nodes_from_route(cond_graph, route):
        node = full_graph.nodes[node_id]
        ele = node["elevation"]

        if last_id is None:
            step_dist = 0
        else:
            step_dist = full_graph[last_id][node_id]["distance"]

        cml_dist += step_dist
        last_id = node_id

        eles.append(ele)
        dists.append(cml_dist)

    distance = route.distance
    elevation = route.elevation_gain
    title = f"Distance: {distance}, Elevation: {elevation}"

    route_trace = go.Scatter(
        mode="lines+markers", x=dists, y=eles, line=dict(shape="spline")
    )

    layout = go.Layout(
        title=title,
        margin=dict(l=20, r=20, t=20, b=20),
    )

    figure = go.Figure(data=[route_trace], layout=layout)

    return figure


def generate_route_polyline(
    full_graph: DiGraph, cond_graph: DiGraph, route: Route
) -> dl.Polyline:
    """For a generated route, generate a Plotly graph which plots it onto
    a mapbox map.

    Args:
        graph (Graph): A graph containing latitude & longitude information for
          every node visited in the provided route
        route (Route): A route generated by a RouteMaker

    Returns:
        go.Figure: A mapbox plot of the provided route
    """

    positions = get_visited_coords_from_route(full_graph, cond_graph, route)

    polyline = dl.Polyline(positions=positions, id="route-plot-trace")

    return polyline
