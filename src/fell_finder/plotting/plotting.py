"""Some basic functions for plotting routes and their elevation profiles,
this will be a prime target for development once work on the webapp gets
underway."""

from typing import List, Dict

import dash_leaflet as dl
from rustworkx import PyDiGraph

# from networkx import DiGraph
from plotly import graph_objects as go

from fell_finder.containers.routes import Route


def generate_filename(route: Route) -> str:
    """Generate a file name for the provided route.

    Args:
        route (Route): A populated route

    Returns:
        str: A name for the provided route
    """
    gain = route.elevation_gain
    dist = route.distance
    name = f"gain_{gain:,.2f}_dist_{dist:,.2f}"
    return name


# TODO: Use dash-leaflet to rewrite this function


def get_geometry_from_route(
    graph: PyDiGraph, route: Route
) -> Dict[str, List[float]]:
    lats = []
    lons = []
    elevations = []
    distances = []

    last_id = None
    cur_dist = 0.0
    for node_id in route.route:
        if last_id is not None:
            last_edge = graph.get_edge_data(last_id, node_id)
            geometry = last_edge.geometry

            lats += geometry["lat"]
            lons += geometry["lon"]
            elevations += geometry["elevation"]
            for step_dist in geometry["distance"]:
                cur_dist += step_dist
                distances.append(cur_dist)

        route_geometry = {
            "lats": lats,
            "lons": lons,
            "elevations": elevations,
            "distances": distances,
        }

        last_id = node_id

    return route_geometry


def plot_elevation_profile(graph: PyDiGraph, route: Route) -> go.Figure:
    """For a generated route, generate a plotly graph which displays the
    elevation profile.

    Args:
        route (Route): A route generated by a RouteMaker"""

    route_geo = get_geometry_from_route(graph, route)

    distance = route_geo["distances"]
    elevation = route_geo["elevations"]

    total_distance = route.distance
    total_elevation = route.elevation_gain

    title = f"Distance: {total_distance}, Elevation: {total_elevation}"

    route_trace = go.Scatter(
        mode="lines+markers",
        x=distance,
        y=elevation,
        line=dict(shape="spline"),
    )

    layout = go.Layout(
        title=title,
        margin=dict(l=20, r=20, t=20, b=20),
    )

    figure = go.Figure(data=[route_trace], layout=layout)

    return figure


def generate_route_polyline(graph: PyDiGraph, route: Route) -> dl.Polyline:
    """For a generated route, generate a Plotly graph which plots it onto
    a mapbox map.

    Args:
        graph (Graph): A graph containing latitude & longitude information for
          every node visited in the provided route
        route (Route): A route generated by a RouteMaker

    Returns:
        go.Figure: A mapbox plot of the provided route
    """

    # positions = get_visited_coords_from_route(full_graph, cond_graph, route)
    route_geo = get_geometry_from_route(graph, route)
    positions = [
        (lat, lon) for lat, lon in zip(route_geo["lats"], route_geo["lons"])
    ]

    polyline = dl.Polyline(positions=positions, id="route-plot-trace")

    return polyline
